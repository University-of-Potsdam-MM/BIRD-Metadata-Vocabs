{"version":3,"file":"component---src-pages-index-js-809cf5a1027035673d0c.js","mappings":"iOAwGA,UA9FkBA,IAAmB,IAAlB,SAAEC,GAAUD,EAC7B,MAAM,EAACE,EAAe,EAACC,IAAqBC,EAAAA,EAAAA,UAAS,KAC/C,EAACC,EAAS,EAACC,IAAeF,EAAAA,EAAAA,UAAS,KACnC,KAAEG,EAAI,YAAEC,IAAgBC,EAAAA,EAAAA,MACxB,OAAEC,IAAWC,EAAAA,EAAAA,KACbC,EAAeF,EAAOE,cAE5BC,EAAAA,EAAAA,YAAU,MACRC,iBACE,MAAMC,QAAYC,MAAM,cAClBC,QAAeF,EAAIG,OACzBf,EAAkBc,GAClB,MAAME,EAAYC,MAAMC,KACtB,IAAIC,KAAGC,EAAAA,EAAAA,GAAKN,EAAOO,SAASC,GAAOA,EAAGN,eAExCX,EAAY,IAAKD,EAAMY,UAAWA,EAAWO,WAAW,GAC1D,CACAC,EAAkB,GACjB,KAGHd,EAAAA,EAAAA,YAAU,KACR,MAAMe,GAAkBC,EAAAA,EAAAA,oBAAmB5B,GAC3C,GAAI2B,IAAoBrB,EAAKuB,iBAAkB,CAC7C,MAAMC,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,mBAAoB1B,EAAKY,UACzBW,iBAAkBF,IAGpBtB,EAAYyB,GACZvB,EAAY,IACPD,EACHuB,iBAAkBC,EAClBL,WAAW,EACXQ,cAAe,CAAC,GAEpB,KAAO,CACL,MAAMH,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,mBAAoB1B,EAAKY,UACzBW,kBAAkBvB,aAAI,EAAJA,EAAMuB,mBAAoB,OAE9CxB,EAAYyB,GACZvB,EAAY,IACPD,EACHuB,iBAAkBC,EAClBL,WAAW,EACXQ,cAAe,CAAC,GAEpB,IACC,CAAC3B,aAAI,EAAJA,EAAMY,UAAWZ,aAAI,EAAJA,EAAMuB,mBAe3B,OACEK,EAAAA,EAAAA,IAACC,EAAAA,EAAM,CAAC/B,SAAUA,IAChB8B,EAAAA,EAAAA,IAACE,EAAAA,EAAG,CAACC,MAAM,kBAAkBC,SAAU,CAAC,qBACxCJ,EAAAA,EAAAA,IAAA,OAAKK,UAAU,qBACbL,EAAAA,EAAAA,IAAA,UACGjC,EAAeuC,KAAKC,IACnBP,EAAAA,EAAAA,IAAA,MAAIQ,IAAKD,EAAcE,KACrBT,EAAAA,EAAAA,IAACU,EAAAA,KAAI,CACHC,QAASA,IACPtC,EAAY,IACPD,EACHwC,wBAAsBxB,EAAAA,EAAAA,GAAMmB,EAAcvB,WAC1Ce,cAAeQ,EACfZ,iBAAkBY,EAAcvB,UAAU6B,SAAS3C,GAC/CA,EACAqC,EAAcvB,UAAU,KAGhC8B,IAAIC,EAAAA,EAAAA,aAAYR,EAAcE,GAAK,OAAOhC,IA/BtC8B,KAChB,MAAMJ,GACJa,EAAAA,EAAAA,MAAK9C,EAAL8C,EACET,aAAa,EAAbA,EAAeJ,SACbI,aAAa,EAAbA,EAAeU,aACfV,aAAa,EAAbA,EAAeW,YACdX,EAAcE,GACrB,OAAIN,GAGGI,EAAcE,EAAE,EAuBVU,CAASZ,SAMb,C","sources":["webpack://skohub-vocabs/./src/pages/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Link } from \"gatsby\"\nimport { i18n, getFilePath, getLanguageFromUrl } from \"../common\"\nimport { useSkoHubContext } from \"../context/Context\"\nimport { getUserLang } from \"../hooks/getUserLanguage\"\nimport { getConfigAndConceptSchemes } from \"../hooks/configAndConceptSchemes.js\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({ location }) => {\n  const [conceptSchemes, setConceptSchemes] = useState([])\n  const [language, setLanguage] = useState(\"\")\n  const { data, updateState } = useSkoHubContext()\n  const { config } = getConfigAndConceptSchemes()\n  const customDomain = config.customDomain\n\n  useEffect(() => {\n    async function fetchConceptData() {\n      const res = await fetch(\"index.json\")\n      const csData = await res.json()\n      setConceptSchemes(csData)\n      const languages = Array.from(\n        new Set([...csData.flatMap((cs) => cs.languages)])\n      )\n      updateState({ ...data, languages: languages, indexPage: true })\n    }\n    fetchConceptData()\n  }, [])\n\n  // set language stuff\n  useEffect(() => {\n    const languageFromUrl = getLanguageFromUrl(location)\n    if (languageFromUrl && !data.selectedLanguage) {\n      const userLang = getUserLang({\n        availableLanguages: data.languages,\n        selectedLanguage: languageFromUrl,\n      })\n\n      setLanguage(userLang)\n      updateState({\n        ...data,\n        selectedLanguage: userLang,\n        indexPage: true,\n        currentScheme: {},\n      })\n    } else {\n      const userLang = getUserLang({\n        availableLanguages: data.languages,\n        selectedLanguage: data?.selectedLanguage || null,\n      })\n      setLanguage(userLang)\n      updateState({\n        ...data,\n        selectedLanguage: userLang,\n        indexPage: true,\n        currentScheme: {},\n      })\n    }\n  }, [data?.languages, data?.selectedLanguage])\n\n  const getTitle = (conceptScheme) => {\n    const title =\n      i18n(language)(\n        conceptScheme?.title ||\n          conceptScheme?.prefLabel ||\n          conceptScheme?.dc_title\n      ) || conceptScheme.id\n    if (title) {\n      return title\n    }\n    return conceptScheme.id\n  }\n\n  return (\n    <Layout language={language}>\n      <SEO title=\"Concept Schemes\" keywords={[\"conceptSchemes\"]} />\n      <div className=\"centerPage block\">\n        <ul>\n          {conceptSchemes.map((conceptScheme) => (\n            <li key={conceptScheme.id}>\n              <Link\n                onClick={() =>\n                  updateState({\n                    ...data,\n                    conceptSchemeLanguages: [...conceptScheme.languages],\n                    currentScheme: conceptScheme,\n                    selectedLanguage: conceptScheme.languages.includes(language)\n                      ? language\n                      : conceptScheme.languages[0],\n                  })\n                }\n                to={getFilePath(conceptScheme.id, `html`, customDomain)}\n              >\n                {getTitle(conceptScheme)}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"],"names":["_ref","location","conceptSchemes","setConceptSchemes","useState","language","setLanguage","data","updateState","useSkoHubContext","config","getConfigAndConceptSchemes","customDomain","useEffect","async","res","fetch","csData","json","languages","Array","from","Set","_toConsumableArray","flatMap","cs","indexPage","fetchConceptData","languageFromUrl","getLanguageFromUrl","selectedLanguage","userLang","getUserLang","availableLanguages","currentScheme","___EmotionJSX","Layout","SEO","title","keywords","className","map","conceptScheme","key","id","Link","onClick","conceptSchemeLanguages","includes","to","getFilePath","i18n","prefLabel","dc_title","getTitle"],"sourceRoot":""}